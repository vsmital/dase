package soc.qase.com;

import junit.framework.TestCase;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import soc.qase.info.User;

/**
 * Created by Vojtech.Smital on 18.2.2016.
 */
@RunWith(MockitoJUnitRunner.class)
public class ProxyTest extends TestCase {

    @Mock
    private CommunicationHandler communicator;

    @InjectMocks
    private Proxy proxy;

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_challangeProcessing() {
        proxy.setUser(createUser());
        //proxy.sentChallenge = true;

        final String hexString = "ffffffff6368616c6c656e67652031323437333032323031";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_clientConnectProcessing() {
        proxy.setUser(createUser());
        //proxy.sentConnect = true;

        final String hexString = "ffffffff636c69656e745f636f6e6e656374";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_cmdConfigString() {
        final String hexString = "010000800100008014200000002448000000000000636173746c650013636d6420636f6e666967737472696e677320313834363820300a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverConfig() {
        final String hexString = "0200008002000000150000636173746c650015020065326d310015040065326d310015060065326d3174696c6500151f002d383634373439373837001521006d6170732f636173746c652e627370001522002a31001523002a32001524002a33001525002a34001526002a35001527002a36001528002a37001529002a3800152a002a3900152b002a313000152c002a313100152d002a313200152e002a313300152f002a3134001530002a3135001531002a3136001532002a3137001533002a3138001534002a3139001535002a3230001536002a3231001537002a3232001538002a3233001539002a323400153a002a323500153b002a323600153c002a323700153d006d6f64656c732f65312f775f74676c6f76652e646b6d00153e006d6f64656c732f65312f615f74617a65722e646b6d00153f006d6f64656c732f65312f77615f676c6f636b2e646b6d001540006d6f64656c732f65312f77655f696f6e6578706c2e737032001541006d6f64656c732f65312f775f696f6e626c61737465722e646b6d001542006d6f64656c732f65312f615f696f6e2e646b6d001543006d6f64656c732f65312f77615f696f6e2e646b6d001544006d6f64656c732f65312f77655f696f6e626c2e646b6d001545006d6f64656c732f65312f77655f696f6e6469732e737032001546006d6f64656c732f65312f77655f6d66696f6e2e737032001547006d6f64656c732f65312f77655f696f6e62662e737032001548006d6f64656c732f65312f775f63342e646b6d001549006d6f64656c732f65312f615f63342e646b6d00154a006d6f64656c732f65312f77615f63342e646b6d00154b006d6f64656c732f65312f77655f633470726a2e646b6d00154c006d6f64656c732f65312f775f73686f746379636c65722e646b6d00154d006d6f64656c732f65312f615f73686f742e646b6d00154e006d6f64656c732f65312f77615f73686f74362e646b6d00154f006d6f64656c732f65312f77655f73686f7463792e737032001550006d6f64656c732f65312f77655f73686f747368656c6c2e646b6d001551006d6f64656c732f65312f775f7369646577696e6465722e646b6d001552006d6f64656c732f65312f615f7377696e64722e646b6d001553006d6f64656c732f65312f77615f7377696e64722e646b6d001554006d6f64656c732f65312f77655f7377726f636b65742e646b6d001555006d6f64656c732f676c6f62616c2f77655f666c617265616d6265722e737032001556006d6f64656c732f65312f77655f6d667377696e6465722e737032001557006d6f64656c732f65312f775f73686f636b776176652e646b6d001558006d6f64656c732f65312f615f73686f6b77762e646b6d001559006d6f64656c732f65312f77615f73686f6b77762e646b6d00155a006d6f64656c732f65312f77655f336473686f636b2e646b6d00155b006d6f64656c732f65312f77655f73686f636b72696e672e73703200155c006d6f64656c732f65312f77655f73686f636b6578702e73703200155d006d6f64656c732f676c6f62616c2f77655f73686f7472696e672e73703200155e006d6f64656c732f65312f77655f6d6673776176652e73703200155f006d6f64656c732f65312f77655f73686f636b77616c6c2e737032001560006d6f64656c732f65312f775f67617368616e642e646b6d001561006d6f64656c732f65312f615f67617368616e642e646b6d001562006d6f64656c732f65312f77615f67617368616e642e646b6d001563006d6f64656c732f65312f77655f67617368616e642e646b6d001564006d6f64656c732f676c6f62616c2f775f6461696b6174616e612e646b6d001565006d6f64656c732f676c6f62616c2f615f6461696b6174616e612e646b6d001566006d6f64656c732f65342f77615f676c6f636b2e646b6d0013636d6420636f6e666967737472696e6773203138343638203130330a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverConfig2() {
        final String hexString = "03000080030000801567006d6f64656c732f676c6f62616c2f77655f646b6c6576656c2e646b6d001568006d6f64656c732f676c6f62616c2f77735f6461696b6174616e612e646b6d001569006d6f64656c732f676c6f62616c2f655f676962746f72736f2e646b6d00156a006d6f64656c732f676c6f62616c2f655f6769626c65672e646b6d00156b006d6f64656c732f676c6f62616c2f655f676962666f6f742e646b6d00156c006d6f64656c732f676c6f62616c2f655f67696268616e642e646b6d00156d006d6f64656c732f676c6f62616c2f655f676962686561642e646b6d00156e006d6f64656c732f676c6f62616c2f655f67696263686573742e646b6d00156f006d6f64656c732f676c6f62616c2f655f6769626579652e646b6d001570006d6f64656c732f676c6f62616c2f655f67696261726d2e646b6d001571006d6f64656c732f676c6f62616c2f655f6769626d6973632e646b6d001572006d6f64656c732f676c6f62616c2f655f776f6f64312e646b6d001573006d6f64656c732f676c6f62616c2f655f776f6f64322e646b6d001574006d6f64656c732f676c6f62616c2f655f676c617373312e646b6d001575006d6f64656c732f676c6f62616c2f655f676c617373322e646b6d001576006d6f64656c732f676c6f62616c2f655f6d6574616c312e646b6d001577006d6f64656c732f676c6f62616c2f655f6d6574616c322e646b6d001578006d6f64656c732f676c6f62616c2f655f676962726f626f74312e646b6d001579006d6f64656c732f676c6f62616c2f655f676962726f626f74322e646b6d00157a006d6f64656c732f676c6f62616c2f655f676962726f626f74332e646b6d00157b006d6f64656c732f676c6f62616c2f655f676962726f626f74342e646b6d00157c006d6f64656c732f676c6f62616c2f655f726f636b312e646b6d00157d006d6f64656c732f676c6f62616c2f655f726f636b322e646b6d00157e006d6f64656c732f676c6f62616c2f655f726f636b332e646b6d00157f006d6f64656c732f676c6f62616c2f615f707772622e646b6d001580006d6f64656c732f676c6f62616c2f615f707772632e646b6d001581006d6f64656c732f676c6f62616c2f615f61746b622e646b6d001582006d6f64656c732f676c6f62616c2f615f61746b632e646b6d001583006d6f64656c732f676c6f62616c2f615f737064622e646b6d001584006d6f64656c732f676c6f62616c2f615f737064632e646b6d001585006d6f64656c732f676c6f62616c2f615f616372622e646b6d001586006d6f64656c732f676c6f62616c2f615f616372632e646b6d001587006d6f64656c732f676c6f62616c2f615f76746c622e646b6d001588006d6f64656c732f676c6f62616c2f615f76746c632e646b6d001589006d6f64656c732f65332f64335f73746f6f6c2e646b6d00158a006d6f64656c732f65332f64335f616c7465722e646b6d00158b006d6f64656c732f65332f64335f6b6567732e646b6d00158c006d6f64656c732f65332f64335f666c6167312e646b6d00158d006d6f64656c732f65332f64335f7461626c652e646b6d00158e006d6f64656c732f65332f64335f647261676f6e7374617475652e646b6d00158f006d6f64656c732f65312f645f646b6c6f676f2e646b6d001590006d6f64656c732f65312f61315f686c74682e646b6d001591006d6f64656c732f65322f64325f736e616b65666972652e646b6d001592006d6f64656c732f65312f61315f6172322e646b6d001593006d6f64656c732f676c6f62616c2f615f67736f756c2e646b6d001594006d6f64656c732f65312f61315f6172312e646b6d001595006d6f64656c732f676c6f62616c2f65325f66697265612e737032001596006d6f64656c732f676c6f62616c2f6d5f6869726f2e646b6d0015210265312f77655f64676c6f766572656164792e7761760013636d6420636f6e666967737472696e6773203138343638203534360a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverConfigWithCmdBaseLine() {
        final String hexString
                = "0a0000800a0000001582036d696b696b6f2f696365352e776176001583036d696b696b6f2f696365362e776176001584036d696b696b6f2f696365372e776176001585036869726f2f6963656465617468312e776176001586036869726f2f6963656465617468322e776176001587036869726f2f6963656465617468332e776176001588036869726f2f6963656465617468342e776176001589036869726f2f6963656465617468352e77617600158a03676c6f62616c2f77655f73776f726477686f6f7368622e77617600158b03676c6f62616c2f77655f73776f726477686f6f7368642e77617600158c03676c6f62616c2f77655f73776f726477686f6f7368652e77617600158d03676c6f62616c2f77655f73776f726477686f6f7368662e77617600158e03676c6f62616c2f6d5f73776f7264686974612e77617600158f03676c6f62616c2f6d5f73776f7264686974622e77617600159003676c6f62616c2f6d5f73776f7264686974632e77617600159103676c6f62616c2f6d5f73776f7264686974642e77617600159203676c6f62616c2f6d5f73776f7264686974652e77617600159303676c6f62616c2f77655f73776f726477636c616e6b612e77617600159403676c6f62616c2f77655f73776f726477636c616e6b622e77617600159503676c6f62616c2f77655f73776f726477636c616e6b632e77617600159603676c6f62616c2f77655f73776f726477636c616e6b642e77617600159703676c6f62616c2f77655f73776f726477636c616e6b652e77617600159803676c6f62616c2f6d5f61726d6f72686974612e77617600159903676c6f62616c2f6d5f61726d6f72686974622e77617600159a03676c6f62616c2f6d5f61726d6f72686974632e77617600159b03676c6f62616c2f6d5f61726d6f72686974642e77617600159c03676c6f62616c2f6d5f61726d6f72686974652e77617600159d03676c6f62616c2f77655f73776f726473746162612e77617600159e03676c6f62616c2f77655f73776f726473746162622e77617600159f03676c6f62616c2f77655f73776f726473746162632e7761760015a003676c6f62616c2f77655f73776f726473746162642e7761760015a103676c6f62616c2f695f7377696e646572616d6d6f2e7761760015a203676c6f62616c2f695f736379636c6572616d6d6f2e7761760015a303676c6f62616c2f695f696f6e616d6d6f2e7761760015a403676c6f62616c2f655f7261696e632e7761760015a503676c6f62616c2f6e65775f74656c65706f7274312e776176001520056d001521056d6d6e6d6d6f6d6d6f6d6d6e6f6e6d6d6f6e716e6d6d6f001522056162636465666768696a6b6c6d6e6f707172737475767778797a797877767574737271706f6e6d6c6b6a696867666564636261001523056d6d6d6d6d61616161616d6d6d6d6d61616161616162636465666761626364656667001524056d616d616d616d616d616d61001525056a6b6c6d6e6f707172737475767778797a797877767574737271706f6e6d6c6b6a001526056e6d6f6e716e6d6f6d6e6d6f6d6f6d6e6f001527056d6d6d616161616263646566676d6d6d6d616161616d6d6d61616d6d001528056d6d6d6161616d6d6d6161616d6d6d616263646566616161616d6d6d6d6162636465666d6d6d616161610015290561616161616161617a7a7a7a7a7a7a7a00152a056d6d616d616d6d6d6d616d6d616d616d6161616d616d6d6d6100152b056162636465666768696a6b6c6d6e6f7071727271706f6e6d6c6b6a69686766656463626100155f056100152007566f6a745c6d6f64656c732f676c6f62616c2f6d5f6869726f2e646b6d5c736b696e732f6869726f5f626f645f312e77616c5c300013636d6420626173656c696e657320313834363820300a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverSpawnBaseline() {
        final String hexString = "0b0000800b00008016838a84511133000002c03240cf4000c03240cf40000000803f0000803f0000803f0000803f16838a8451122e00000200e18012400000e1801240000000803f0000803f0000803f0000803f16838a8451132a0000028032c01240008032c01240000000803f0000803f0000803f0000803f16838a8451142300000200e100cf400000e100cf40000000803f0000803f0000803f0000803f16838a827915690080e6800f400180e6800f400102000000803f0000803f0000803f0707200707010000803f05200002000116838a8279166a00a0e500084001a0e50008400102000000803f0000803f0000803f151f20141e010000803f05200002000116838a8279176b00a0e5e0016002a0e5e001600202000000803f0000803f0000803f0f0f200b0f040000803f05200002000116838a8279186c00c0e400084006c0e40008400602000000803f0000803f0000803f11031f34032a0000803f25200041003b0116838a8279196d00a0e5200e4001a0e5200e400102000000803f0000803f0000803f1a28201a28020000803f05200002000116838280d5808080011a00ec0008800f00ec0008800f8401993e1c000000803f0000803f0000803f0000803f16809884d0091b020004000000040000803f0000803f0000803f0000803f00c02f44004058c400001041002080440000bec20080944316809884d0091c030004000000040000803f0000803f0000803f0000803f004060c4004070c4000010410080bfc30000803f0080944316809884d0091d040004000000040000803f0000803f0000803f0000803f0080c0c30020b8c4000010410020804400c057c40080944316809884d0091e050004000000040000803f0000803f0000803f0000803f004060c40080ff43000010410020c04400402c440010044516809884d0091f060004000000040000803f0000803f0000803f0000803f002086c40020cec40000104100c05fc400402c440010044516809884d00920070004000000040000803f0000803f0000803f0000803f0080c0c300005f430080a043002080440080b0430010044516809884d00921080004000000040000803f0000803f0000803f0000803f004050c40000f8410080a0430080cfc30080f0430010044516809884d00922090004000000040000803f0000803f0000803f0000803f004030c4004070c40080a04300c00fc40000803f0010044516878a8279236e0000f500ff400100809d4300f500ff400102000000803f0000803f0000803f3117181731aa0000803f05200002000116878a8279246f00c0f4c00a000300008743c0f4c00a000302000000803f0000803f0000803f08081408081a0000803f25200041001d011687da80d18080202661000120002200d4c00000001042002200d4c0000000803f0000803f0000803f3333333fc01687ca84d19080202762000180210002002200d4c00000001042002200d4c0000000803f0000803f0000803f0000803fff1687da80d1808020285f0001200022c00dc000000010420022c00dc0000000803f0000803f0000803f3333333fc01687ca84d190802029600001800900020022c00dc000000010420022c00dc0000000803f0000803f0000803f0000803fff16838a84512a2a000002002c00084000002c000840000000803f0000803f0000803f0000803f16838a84512b70000002002c00040001002c000400010000803f0000803f0000803f0000803f16838a84512c33000002002c00da4000002c00da40000000803f0000803f0000803f0000803f16838a84512d70000002002c00d60001002c00d600010000803f0000803f0000803f0000803f1687da80d18080202e6300012000f200d4c0000000104200f200d4c0000000803f0000803f0000803f3333333fc01687ca84d19080202f6400018011000200f200d4c0000000104200f200d4c0000000803f0000803f0000803f0000803fff13636d6420626173656c696e65732031383436382034380a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverSpawnBaseline2() {
        final String hexString
                = "0c0000800c00000016838a8451302300000200e800da400000e800da40000000803f0000803f0000803f0000803f16838a8451317000000200e800d6000100e800d600010000803f0000803f0000803f0000803f1687da80d1808020326700012000f2000ec0000000104200f2000ec0000000803f0000803f0000803f3333333fc01687ca84d1908020336800018005000200f2000ec0000000104200f2000ec0000000803f0000803f0000803f0000803fff16838a8451347000000200e8000c000100e8000c00010000803f0000803f0000803f0000803f16838a8451352e00000200e80008400000e8000840000000803f0000803f0000803f0000803f16838a827936710000e900f2800e00e900f2800e02000000803f0000803f0000803f19181019192d0000803f05200002000116838a827937710000ef00f2800e00ef00f2800e02000000803f0000803f0000803f19181019192d0000803f05200002000116838a80d880808005380a00b0f300084002a52014001f000000803f0000803f0000803f0000803fb0f3000840021683ca8451397200010002002900f2800a002900f2800a0000803f0000803f0000803f0000803f1687da80d18080203a65000120400300f1c01800001042400300f1c0180000803f0000803f0000803f3333333fc01687ca84d19080203b66000180030002400300f1c01800001042400300f1c0180000803f0000803f0000803f0000803fff1683ca86d5808080013c7300010002a01000f10019a01000f10019d100ff2014000000803f0000803f0000803f0000803f2520004100090116808880503d0b000000803f0000803f0000803f0000803f16808880503e0c000000803f0000803f0000803f0000803f16838a80d880808001410d00000ae0f0301ba52014001f000000803f0000803f0000803f0000803f16838a84514223000002e828800a000ae828800a000a0000803f0000803f0000803f0000803f1683ca8651432200010002e028e008800ae028e008800a0000803f0000803f0000803f0000803f2d2003020003030116838a8451442e000002282940d8000a282940d8000a0000803f0000803f0000803f0000803f1683ca8651452d000100022029e0d9800a2029e0d9800a0000803f0000803f0000803f0000803f2d2003020003030116838a8451462a00000228ecf8d7000a28ecf8d7000a0000803f0000803f0000803f0000803f1683ca865147290001000220ece0d9800a20ece0d9800a0000803f0000803f0000803f0000803f2d200302000303011680888050480e000000803f0000803f0000803f0000803f1683ca845149740001000200ec00f2800a00ec00f2800a0000803f0000803f0000803f0000803f16838a84514a3300000200ec600b000a00ec600b000a0000803f0000803f0000803f0000803f1683ca86514b320001000200ecc009800a00ecc009800a0000803f0000803f0000803f0000803f2d2003020003030116839a88514c75000020280024c0ff60060024c0ff60060000803f0000803f0000803f0000803f16879a88514d75000020280024c0ff60060000b4420024c0ff60060000803f0000803f0000803f0000803f16839a8851507500002028002cc0ff6006002cc0ff60060000803f0000803f0000803f0000803f16879a8851517500002028002cc0ff60060000b442002cc0ff60060000803f0000803f0000803f0000803f16839a8851527500002028002c40e26006002c40e260060000803f0000803f0000803f0000803f16879a8851537500002028002c40e260060000b442002c40e260060000803f0000803f0000803f0000803f16839a8851547500002028002440e26006002440e260060000803f0000803f0000803f0000803f16879a8851557500002028002440e260060000b442002440e260060000803f0000803f0000803f0000803f13636d6420626173656c696e65732031383436382038360a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverSpawnBaseline3() {
        final String hexString
                = "0d0000800d00008016839a885156750000202800f040e2600600f040e260060000803f0000803f0000803f0000803f16879a885157750000202800f040e260060000b44200f040e260060000803f0000803f0000803f0000803f16839a885158750000202800e840e2600600e840e260060000803f0000803f0000803f0000803f16879a885159750000202800e840e260060000b44200e840e260060000803f0000803f0000803f0000803f16839a88515a750000202800e8c0ff600600e8c0ff60060000803f0000803f0000803f0000803f16879a88515b750000202800e8c0ff60060000b44200e8c0ff60060000803f0000803f0000803f0000803f16839a88515c750000202800f0c0ff600600f0c0ff60060000803f0000803f0000803f0000803f16879a88515d750000202800f0c0ff60060000b44200f0c0ff60060000803f0000803f0000803f0000803f16839a88515e750000202840f400d6600640f400d660060000803f0000803f0000803f0000803f16879a88515f750000202840f400d660060000b44240f400d660060000803f0000803f0000803f0000803f16839a885160750000202840f400de600640f400de60060000803f0000803f0000803f0000803f16879a885161750000202840f400de60060000b44240f400de60060000803f0000803f0000803f0000803f16839a8851627500002028c01f00d66006c01f00d660060000803f0000803f0000803f0000803f16879a8851637500002028c01f00d660060000b442c01f00d660060000803f0000803f0000803f0000803f16839a8851647500002028c01f00de6006c01f00de60060000803f0000803f0000803f0000803f16879a8851657500002028c01f00de60060000b442c01f00de60060000803f0000803f0000803f0000803f16839a8851667500002028c01f00046006c01f000460060000803f0000803f0000803f0000803f16879a8851677500002028c01f000460060000b442c01f000460060000803f0000803f0000803f0000803f16839a8851687500002028c01f000c6006c01f000c60060000803f0000803f0000803f0000803f16879a8851697500002028c01f000c60060000b442c01f000c60060000803f0000803f0000803f0000803f16839a88516a750000202840f40004a00640f40004a0060000803f0000803f0000803f0000803f16879a88516b750000202840f40004a0060000b44240f40004a0060000803f0000803f0000803f0000803f16839a88516c750000202840f4000ca00640f4000ca0060000803f0000803f0000803f0000803f16879a88516d750000202840f4000ca0060000b44240f4000ca0060000803f0000803f0000803f0000803f16839a88516e7500002028c0fdc0f0e00bc0fdc0f0e00b0000803f0000803f0000803f0000803f16879a88516f7500002028c0fdc0f0e00b0000b442c0fdc0f0e00b0000803f0000803f0000803f0000803f16839a88517075000020284016c0f0e00b4016c0f0e00b0000803f0000803f0000803f0000803f16879a88517175000020284016c0f0e00b0000b4424016c0f0e00b0000803f0000803f0000803f0000803f16839a8851727500002028000ac0e4e00b000ac0e4e00b0000803f0000803f0000803f0000803f16879a8851737500002028000ac0e4e00b0000b442000ac0e4e00b0000803f0000803f0000803f0000803f16839a8851747500002028000a40fde00b000a40fde00b0000803f0000803f0000803f0000803f16879a8851757500002028000a40fde00b0000b442000a40fde00b0000803f0000803f0000803f0000803f16839a8851767500002028101328f9e00b101328f9e00b0000803f0000803f0000803f0000803f16879a8851777500002028101328f9e00b0000b442101328f9e00b0000803f0000803f0000803f0000803f16839a8851787500002028080168e8e00b080168e8e00b0000803f0000803f0000803f0000803f13636d6420626173656c696e6573203138343638203132310a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverSpawnBaseline4() {
        final String hexString
                = "110000801100000016879a8851797500002028080168e8e00b0000b442080168e8e00b0000803f0000803f0000803f0000803f16839a88517a7500002028300198f9e00b300198f9e00b0000803f0000803f0000803f0000803f16879a88517b7500002028300198f9e00b0000b442300198f9e00b0000803f0000803f0000803f0000803f16839a88517c7500002028b81258e8e00bb81258e8e00b0000803f0000803f0000803f0000803f16879a88517d7500002028b81258e8e00b0000b442b81258e8e00b0000803f0000803f0000803f0000803f16839a88517e7500002028c825f0f1e010c825f0f1e0100000803f0000803f0000803f0000803f16879a88517f7500002028c825f0f1e0100000b442c825f0f1e0100000803f0000803f0000803f0000803f16839a8851807500002028c82bf8f1e010c82bf8f1e0100000803f0000803f0000803f0000803f16879a8851817500002028c82bf8f1e0100000b442c82bf8f1e0100000803f0000803f0000803f0000803f16839a885182750000202808ef00f2e01008ef00f2e0100000803f0000803f0000803f0000803f16879a885183750000202808ef00f2e0100000b44208ef00f2e0100000803f0000803f0000803f0000803f16839a885184750000202808e900f2e01008e900f2e0100000803f0000803f0000803f0000803f16879a885185750000202808e900f2e0100000b44208e900f2e0100000803f0000803f0000803f0000803f1680888050860f000000803f0000803f0000803f0000803f16838a80d880808005871000502000084002a52014001f000000803f0000803f0000803f0000803f50200008400216838a8279887100c02500f2800ec02500f2800e02000000803f0000803f0000803f19181019192d0000803f05200002000116838a8279897100c02b00f2800ec02b00f2800e02000000803f0000803f0000803f19181019192d0000803f05200002000116839a88518a750000202880e40004a00680e40004a0060000803f0000803f0000803f0000803f16879a88518b750000202880e40004a0060000b44280e40004a0060000803f0000803f0000803f0000803f16839a88518c750000202880e4000ca00680e4000ca0060000803f0000803f0000803f0000803f16879a88518d750000202880e4000ca0060000b44280e4000ca0060000803f0000803f0000803f0000803f16839a88518e750000202800e88000a00600e88000a0060000803f0000803f0000803f0000803f16879a88518f750000202800e88000a0060000b44200e88000a0060000803f0000803f0000803f0000803f16839a885190750000202800f0800fa00600f0800fa0060000803f0000803f0000803f0000803f16879a885191750000202800f0800fa0060000b44200f0800fa0060000803f0000803f0000803f0000803f16839a8851927500002028802f000ca006802f000ca0060000803f0000803f0000803f0000803f16879a8851937500002028802f000ca0060000b442802f000ca0060000803f0000803f0000803f0000803f16839a8851947500002028802f0004a006802f0004a0060000803f0000803f0000803f0000803f16879a8851957500002028802f0004a0060000b442802f0004a0060000803f0000803f0000803f0000803f16839a885196750000202800244000a00600244000a0060000803f0000803f0000803f0000803f16879a885197750000202800244000a0060000b44200244000a0060000803f0000803f0000803f0000803f16839a88519875000020280024800fa0060024800fa0060000803f0000803f0000803f0000803f16879a88519975000020280024800fa0060000b4420024800fa0060000803f0000803f0000803f0000803f16838a80d8808080059a1100502000da4002a52014001f000000803f0000803f0000803f0000803f502000da400213636d6420626173656c696e6573203138343638203135350a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverConfigString() {
        final String hexString
                = "2900008020000080176d6f74643a0a0028001202566f6a74206a6f696e6564207468652067616d652e0a001202566f6a74206973207573696e67204461696b6174616e612076312e3320666f72207838362e20204275696c742044656320333020323031342061742030323a35323a34302e0a00030851010000022200152007566f6a745c6d6f64656c732f676c6f62616c2f6d5f6869726f2e646b6d5c736b696e732f6869726f5f626f645f312e77616c5c300017537061776e2070726f74656374696f6e206578706972657320696e2031207365636f6e642e0a0008001c70250000ffffffff0001021982484029c0d4c10a0000585a0009b614c0006400000002000000e803000001000000010000006400000001000000be030000be0300001a878a92fb180176000002400040004029c0d4c10a0000b4424029c0d4c10a02000000803f0000803f0000803f1010181010200000403fa5240001000d01ffff010000510100110012001300140015001600170019001a00230024002e002f003000310032003300340035003600378302380000000000000039003a003b003c838280808080800441000000000000000ae0f0301b0042004300440045004600470049004a004b004c004d0050005100520053005400550056005700580059005a005b005c005d005e005f0060006100620063006400650066006700680069006a006b006c006d006e006f0070007100720073007400750076007700780079007b007c007d007e007f00800081008200830084008500880089009783029b00000000000000ac00ad00b000b100b200b300b400b500b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d100d200d300d400d500d600d700d800d900da00db00dc00dd00de00df00e000e100e200e300e400e500e600e700e800e900ea00eb00ec00ed00ee00ef00f000f100f200f300f400f500f600f700fa00fb00fc00fd00fe00ff8001000180010101800102018001030180010e0180010f01800110018001110180011201800113018001140180011b018001200180012101800122018001240180012501800126018001290180013001800142018001430180014401800145018001460180014701800148018001490180014a0180014b0180014c0180014d01839b9e514e012c000001842020004029c0d4c10a4029c0d4c10a0000803f0000803f0000803f0000803f25201d04001d0111270000839b9e514f011d000001842020004029c0d4c10a4029c0d4c10a0000803f0000803f0000803f0000803f2520310400310111270000839b9e5150011d000001842020004029c0d4c10a4029c0d4c10a0000803f0000803f0000803f0000803f2d205d0400325d0111270000839b9e5151011d000001842028004029c0d4c10a4029c0d4c10a0000803f0000803f0000803f0000803f2d206c02006c790111270000000024ffffff24ffffff1108010008001109c700b20800";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_precacheString() {
        final String hexString
                = "170000801700000016838b82793d016b00602ee0d36002602ee0d3600202000000803f0000803f0000803f0f0f200b0f040000803f05200002000116838b82793e016a00602e00da4001602e00da400102000000803f0000803f0000803f151f20141e010000803f05200002000116878b82793f016c00002840e1400600008743002840e1400602000000803f0000803f0000803f03341f03112a0000803f25200041003b0116878b827940016c000028c0d240060000b4420028c0d2400602000000803f0000803f0000803f03111f03342a0000803f25200041003b0116878b827941016c00402f00da400600003443402f00da400602000000803f0000803f0000803f34031f11032a0000803f25200041003b0116838b827942017100000900dd800e000900dd800e02000000803f0000803f0000803f19181019192d0000803f05200002000116839b885143017500002028080900dde010080900dde0100000803f0000803f0000803f0000803f16879b885144017500002028080900dde0100000b442080900dde0100000803f0000803f0000803f0000803f16838b827945017100000900d7800e000900d7800e02000000803f0000803f0000803f19181019192d0000803f05200002000116839b885146017500002028080900d7e010080900d7e0100000803f0000803f0000803f0000803f16879b885147017500002028080900d7e0100000b442080900d7e0100000803f0000803f0000803f0000803f16838b82794801710000090006800e00090006800e02000000803f0000803f0000803f19181019192d0000803f05200002000116839b88514901750000202808090006e01008090006e0100000803f0000803f0000803f0000803f16879b88514a01750000202808090006e0100000b44208090006e0100000803f0000803f0000803f0000803f16838b82794b0171000009000c800e0009000c800e02000000803f0000803f0000803f19181019192d0000803f05200002000116839b88514c0175000020280809000ce0100809000ce0100000803f0000803f0000803f0000803f16879b88514d0175000020280809000ce0100000b4420809000ce0100000803f0000803f0000803f0000803f137072656361636865203b20636d6420626567696e2031383436380a00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingDataPacket_serverCenterPrint() {
        final String hexString = "260000801d000080176d6f74643a0a0028001202566f6a74206a6f696e6564207468652067616d652e0a001202566f6a74206973207573696e67204461696b6174616e612076312e3320666f72207838362e20204275696c742044656320333020323031342061742030323a35323a34302e0a0003084f010000022200152007566f6a745c6d6f64656c732f676c6f62616c2f6d5f6869726f2e646b6d5c736b696e732f6869726f5f626f645f312e77616c5c300017537061776e2070726f74656374696f6e206578706972657320696e2031207365636f6e642e0a0008001c48290000ffffffff00010219824840ecc0d5c10a0000585a0009b614c0006400000002000000e80300000100000001000000640000000100000021040000210400001a878a92fb1801760000024000400040ecc0d5c10a0000b44240ecc0d5c10a02000000803f0000803f0000803f1010181010200000403fa5240001000d01ffff0100004f010011001200130014001a002300240026002700280029002a002b002c002d003600370039003a003b003c838280808080800441000000000000000ae0f0301b0042004300440045004600470049004a004b004c004d0050005100520053005400550056005700580059005a005b005c005d005e005f0060006100620063006400650066006700680069006a006b006c006d006e006f007100720073007400750076007700780079007a007b007c007d007e007f00800081008200830084008583028700000000000000880089009783029a00000000000000a600a700ae00af00b000b100b200b300b400b500b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d100d200d300d400d500d600d700d800d900da00db00dc00dd00de00df00e000e100e200e300e400e500e600e700e800e900ea00eb00ec00ed00ee00ef00f000f100f200f300f400f500f600f700fa00fb00fc00fd00fe00ff8001000180010101800102018001030180010e0180010f0180011001800112018001130180012a0180012b0180012c0180012d0180012e0180013001800138018001390180013a0180013b0180013c0180013d0180013e0180013f01800142018001430180014401800145018001460180014701800148018001490180014a0180014b0180014c0180014d01839b9e514e012c0000018420200040ecc0d5c10a40ecc0d5c10a0000803f0000803f0000803f0000803f25201d04001d0111270000839b9e514f011d0000018420280040ecc0d5c10a40ecc0d5c10a0000803f0000803f0000803f0000803f2d206c02006c790111270000000024ffffff24ffffff1108010008001109c700b20800";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Ignore
    @Test
    public void testProcessIncomingPacket_serverDownload() {
        final String hexString = "190000801900000018ffff00";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    @Test
    public void testProcessIncomingPacket_serverFrame() {
        final String hexString = "2b000000250000001c7225000071250000000102190000000000001a0000";
        proxy.processIncomingDataPacket(hexStringToByteArray(hexString));
    }

    private byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }

    private User createUser() {
        User user = new User();
        user.setName("DASE_bot");
        user.setFov(90);

        return user;
    }
}
